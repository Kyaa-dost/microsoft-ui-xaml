parameters:
  dependsOn: ''
  rerunPassesRequiredToAvoidFailure: 5
  # minimumExpectedTestsExecutedCount: 3000
  minimumExpectedTestsExecutedCount: 5
  checkJobAttempt: false
  pgoArtifact: ''
  testSuite: 'DevTestSuite' # Can be: DevTestSuite, ScenarioTestSuite

jobs:
- job: ProcessTestResults
  condition: always()
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  variables:
    helixOutputFolder: $(Build.SourcesDirectory)\HelixOutput
    helixScriptPath: $(Build.SourcesDirectory)\build\Helix\packages\Microsoft.Internal.MUXTestInfra.Helix.0.0.2.2\scripts\pipeline

  steps:

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      restoreSolution: build/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: nuget.config
      restoreDirectory: packages

  - task: powershell@2
    displayName: 'UpdateUnreliableTests.ps1'
    condition: succeededOrFailed()
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(helixScriptPath)\UpdateUnreliableTests.ps1
      arguments: -RerunPassesRequiredToAvoidFailure '${{ parameters.rerunPassesRequiredToAvoidFailure }}' -HelixTypeJobFilter ${{ parameters.testSuite }}

  - task: powershell@2
    displayName: 'OutputTestResults.ps1'
    condition: succeededOrFailed()
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(helixScriptPath)\OutputTestResults.ps1
      arguments: -MinimumExpectedTestsExecutedCount '${{ parameters.minimumExpectedTestsExecutedCount }}' -HelixTypeJobFilter ${{ parameters.testSuite }}

  - task: powershell@2
    displayName: 'ProcessHelixFiles.ps1'
    condition: succeededOrFailed()
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      HelixAccessToken: $(HelixApiAccessToken)
    inputs:
      targetType: filePath
      filePath: $(helixScriptPath)\ProcessHelixFiles.ps1
      arguments: -OutputFolder '$(helixOutputFolder)' -HelixTypeJobFilter ${{ parameters.testSuite }}

  - ${{if ne(parameters.pgoArtifact, '') }}:
    - script: move /y $(helixOutputFolder)\PGO $(Build.ArtifactStagingDirectory)
      displayName: 'Move pgc files to PGO artifact'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Helix files'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(helixOutputFolder)
      artifactName: helixTestOutput

  - ${{if ne(parameters.pgoArtifact, '') }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish pgc files'
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)\PGO\Release
        artifactName: ${{ parameters.pgoArtifact }}
